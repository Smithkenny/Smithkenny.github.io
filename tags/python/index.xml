<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on TechOps</title><link>https://haipengv.com/tags/python/</link><description>Recent content in Python on TechOps</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 16 Mar 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://haipengv.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Jupyter更改登录密码</title><link>https://haipengv.com/posts/jupyter%E6%9B%B4%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/jupyter%E6%9B%B4%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81/</guid><description>前言 长时间不登陆jupyter竟然忘记了密码，所以记录下jupyter容器中更改密码过程。 更改过程 进入jupyter容器 1 2 3 docker exec -it vk-jupyter bash cd .jupyter/ vi jupyter_notebook_config.json 生成新密码哈希值</description></item><item><title>Python回炉重造 函数</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%87%BD%E6%95%B0/</guid><description>函数基础 函数基本使用 函数定义 定义函数格式如下： 1 2 3 4 def 函数名(): 函数封装的代码 ... 1.def是英文define的缩写 2.函数名称 应该能够表达 函数封装代码的功能</description></item><item><title>Python回炉重造-元组</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%85%83%E7%BB%84/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%85%83%E7%BB%84/</guid><description>元组 元组的定义 tuple（元组）与列表类似，不同之处在于元组的元素不能修改 元组中包含列表项，可以修改元组值（间接修改列表） 1 2 3 a = ([1,2],[3,4]) a[0][0] = 520 print(a) # ([520, 2], [3, 4]) 元组 表示</description></item><item><title>Python回炉重造-列表</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%88%97%E8%A1%A8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%88%97%E8%A1%A8/</guid><description>列表常用操作 在ipython3中定义一个列表，例如：name_list = [] 输入name_list.按下Tab键，ipython会提示能够使用的方法如下： 1 2 3 name_list.append</description></item><item><title>Python回炉重造-字典</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%AD%97%E5%85%B8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%AD%97%E5%85%B8/</guid><description>字典的定义 dictionary（字典）是 除列表意外python之中 最灵活的数据类型 字典同样可以用来 存储多个数据 通常用于存储 描述一个 物体的相关信息 和列表的区别 列表</description></item><item><title>Python回炉重造-字符串</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>字符串 定义 字符串 就是一串字符，是编程语言中表示文本的数据类型 在 python中可以使用 一堆双引号 &amp;quot;&amp;quot;或者 一对单引号 ''定义一个字符串 虽然可以使</description></item><item><title>Python回炉重造-集合</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E9%9B%86%E5%90%88/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E9%9B%86%E5%90%88/</guid><description>集合 特性： 1.无序性： 一个集合中，每个元素的地位都是相同的，元素之间是无序的 2.互异性： 一个集合中，任何两个元素都是不同的，即元素在集合中只能出现一次 3.确定性</description></item><item><title>Python回炉重造-面向对象编程入门</title><link>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</guid><description>面向对象编程入门 程序是指令的集合 函数： 把相互独立且经常重复使用的代码放置到函数中，在需要使用这些代码的时候调用函数即可。 在面向对象编程的世界里，程序中的数据和操</description></item><item><title>Python多线程</title><link>https://haipengv.com/posts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid><description>python多线程使用 创建线程，入口函数带参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import threading import time print(&amp;#34;*******主线程开始******</description></item><item><title>Python对象和数据结构基础</title><link>https://haipengv.com/posts/python%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</guid><description>运算 算数运算 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 30 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -10 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串</description></item><item><title>Python封装</title><link>https://haipengv.com/posts/python%E5%B0%81%E8%A3%85/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%B0%81%E8%A3%85/</guid><description>封装与反射 片面理解：封装相当于隐藏。 如何将属性隐藏（设置成私有）？ 用双下划线开头方式将属性隐藏起来。 1.__开头的属性只是一种语法意义上的变形，并不会真的限制外</description></item><item><title>Python常用模块</title><link>https://haipengv.com/posts/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</guid><description>日志模块角色 1.Logger:产生日志 2.Filter:几乎不用 3.Handler: 接收Logger传过来的日志，进行日志格式化，可以打印到终端，也可以打印到文件 4.Format</description></item><item><title>Python数据结构总结</title><link>https://haipengv.com/posts/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</guid><description>可变和不可变类型 不可变类型，内存中的数据不允许被修改： 数字类型 int, bool, float, complex, long(2.x) 字符串 str 元组 tuple 可变类型，内存中的数据可以被修改： 列表 list 字典 dict 集合set 哈希 (hash) Python 中内置有一</description></item><item><title>Python文件处理</title><link>https://haipengv.com/posts/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</guid><description>文件处理流程 1.打开文件，得到文件句柄并赋值给一个变量 2.通过句柄对文件进行操作 3.关闭文件 两种文件操作方式 直接操作（需要手动关闭文件） 1 2 3 4 5 6 7 8 #1. 打开文</description></item><item><title>Python方法和函数</title><link>https://haipengv.com/posts/python%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0/</guid><description>方法 方法的格式 1 object.method(arg1,arg2,etc...) 让我们快速看一下列表的各种方法的例子。 1 2 # Create a simple list lst = [1,2,3,4,5] 通过iPython和Jupyter笔记本，我们可以使用tab键快速查看所有可能的方法</description></item><item><title>Python自动化办公</title><link>https://haipengv.com/posts/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</guid><description>读写文件（上）&amp;ndash;文件与文件路径 主要是os.path()第三方库 1.Windows系统中的\和Linux系统中的/ 以下代码在Terminal中执行更直</description></item><item><title>Python自动化办公之excel</title><link>https://haipengv.com/posts/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC%E4%B9%8Bexcel/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC%E4%B9%8Bexcel/</guid><description>安装第三方模块openpyxl 1 pip3 install openpyxl 关于openpyxl模块的参考文档. 使用python操作excel表格，代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 引</description></item><item><title>Python语法</title><link>https://haipengv.com/posts/python%E8%AF%AD%E6%B3%95/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/python%E8%AF%AD%E6%B3%95/</guid><description>python 语法 if、elif、else 语句 嘿，如果发生这种情况，请执行一些操作。否则，如果发生其他情况，请执行其他操作。否则，如果上述情况均未发生，请执行此操作。 if case1: perform</description></item><item><title>Sqlite3使用</title><link>https://haipengv.com/posts/sqlite3%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/sqlite3%E4%BD%BF%E7%94%A8/</guid><description>sqlite3使用 连接数据库 1 2 3 4 5 6 7 8 9 10 import sqlite3 conn = sqlite3.connect(&amp;#34;test.db&amp;#34;) # 打开或创建数据库文件 print(&amp;#34;Opened database successfully&amp;#34;) c = conn.cursor() # 获取游标 sql = &amp;#34;&amp;#34; c.execute(sql) # 执行sql语句 conn.commit() # 提交数据库操作 conn.close() # 关闭数据库连</description></item><item><title>Urllib库的基本使用</title><link>https://haipengv.com/posts/urllib%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/urllib%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>网页各种测试 1 http://httpbin.org 获取一个get请求 1 2 3 import urllib.request res = urllib.request.urlopen(&amp;#34;http://www.baidu.com&amp;#34;) print(res.read().decode(&amp;#39;utf-8&amp;#39;)) # 对获取到的网页源码进行utf-8解码 获取一个post请求.（模拟用户登录） 1 2 3 4 import urllib.parse # 引入解析库 data = bytes(urllib.parse.urlencode({&amp;#34;hello&amp;#34;:&amp;#34;world&amp;#34;}),encoding=&amp;#39;utf-8&amp;#39;) res1</description></item><item><title>使用python实现unix时间戳转换</title><link>https://haipengv.com/posts/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0unix%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0unix%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/</guid><description>将时间戳转换为指定格式 1 2 3 4 import time print(time.time()) # 生成当前日期的时间戳 1662602249.6098158 print(time.actime(1662602249.6098158)) #将时间戳转换成指定格式显示 其他转换参考 https://www.cnblogs.com/pal-duan/p/10568829.html</description></item><item><title>基于TCP的简单套接字通信</title><link>https://haipengv.com/posts/%E5%9F%BA%E4%BA%8Etcp%E7%9A%84%E7%AE%80%E5%8D%95%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E5%9F%BA%E4%BA%8Etcp%E7%9A%84%E7%AE%80%E5%8D%95%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/</guid><description>简单套接字通信 服务端 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import socket #买手机 phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #tcp协议 #绑定手机 # phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1) phone.bind((&amp;#39;127.0.0.1&amp;#39;, 9000)) #0-65535 #开机 phone.listen(5) #等待电话连接 print(&amp;#39;staring....&amp;#39;) conn, client_addr=phone.accept() #(conn,client_addr) .acce</description></item><item><title>安装任意版本Python</title><link>https://haipengv.com/posts/%E5%AE%89%E8%A3%85%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%ACpython/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E5%AE%89%E8%A3%85%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%ACpython/</guid><description>基于centos7/8安装任意版本python 编译安装python 安装python依赖环境 1 2 sudo yum -y install epel-release sudo yum -y update 重启(可选) 1 reboot 安装编译环境 1 2 sudo yum -y groupinstall &amp;#34;Development Tools&amp;#34; sudo yum</description></item><item><title>序列化与反序列化</title><link>https://haipengv.com/posts/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>什么是序列化？ 我们把对象（变量）从内存中变成可存储或传输的过程称之为序列化。在Python中叫pickling，在其他语言中也被称之为serialization</description></item><item><title>异常</title><link>https://haipengv.com/posts/%E5%BC%82%E5%B8%B8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E5%BC%82%E5%B8%B8/</guid><description>异常 什么是异常？ 异常是错误发生的信号，一旦程序出错，就会产生一个异常，应用程序未处理该异常，异常便会抛出，程序随之终止。 常见异常类型 语法错误应该在程序运行之前就</description></item><item><title>模块与包</title><link>https://haipengv.com/posts/%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</guid><description>什么是模块？ 最常见的场景，一个模块就是包含了一组功能的python文件，例如module.py,模块名是module。可以使用import module。 四个通用</description></item><item><title>生成器 可迭代对象 迭代器 迭代</title><link>https://haipengv.com/posts/%E7%94%9F%E6%88%90%E5%99%A8-%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1-%E8%BF%AD%E4%BB%A3%E5%99%A8-%E8%BF%AD%E4%BB%A3/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E7%94%9F%E6%88%90%E5%99%A8-%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1-%E8%BF%AD%E4%BB%A3%E5%99%A8-%E8%BF%AD%E4%BB%A3/</guid><description>可迭代对象（Iterable） python中任意对象，只要它定义了可以返回一个迭代器的__iter__方法，或者定义了可以支持下标索引的__getitem__方</description></item><item><title>类和对象</title><link>https://haipengv.com/posts/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid><description>面向过程与面向对象 面向过程 核心就是过程二字，过程即解决问题的步骤，就是先干什么再干什么 基于该思想写程序就好比在设计一条流水线，是一种机械式的思维方式 优点：复杂的</description></item><item><title>豆瓣展示页</title><link>https://haipengv.com/posts/%E8%B1%86%E7%93%A3%E5%B1%95%E7%A4%BA%E9%A1%B5/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E8%B1%86%E7%93%A3%E5%B1%95%E7%A4%BA%E9%A1%B5/</guid><description>豆瓣展示页 新建flask项目 使用pycharm新建flask项目，项目名为：douban_flask。 将之前的爬取的movie.db文件放到该项目的根目录下。准</description></item><item><title>豆瓣电影爬虫</title><link>https://haipengv.com/posts/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%88%AC%E8%99%AB/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%88%AC%E8%99%AB/</guid><description>爬虫分析步骤 准备工作 获取数据 解析内容 保存数据 url分析 页面包括250条电影数据，分10页，每页25条。每页的url的不同之处：最后的数值= （页数-1）*25 1 2</description></item><item><title>集合的相关特性</title><link>https://haipengv.com/posts/%E9%9B%86%E5%90%88%E7%9A%84%E7%9B%B8%E5%85%B3%E7%89%B9%E6%80%A7/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://haipengv.com/posts/%E9%9B%86%E5%90%88%E7%9A%84%E7%9B%B8%E5%85%B3%E7%89%B9%E6%80%A7/</guid><description>集合的相关特性 去重 1 2 s = {1,2,2,2,2,2,3,3,3,4,4,4,5} print(s) #{1,2,3,4,5} 确保不要将集合与字典混淆，字典也用花括号括起来。 1 2 my_set = {1,2,3} my_dict = {&amp;#34;term&amp;#34;: &amp;#34;definition&amp;#34;, &amp;#34;term2&amp;#34;: &amp;#34;definition2&amp;#34;} set() 将其他数据类型转换成集合类型 1 2 3 l = [1,2,3,4] s = set(l) print(s) #{1,2,3,4} 并集(</description></item></channel></rss>