<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on TechOps</title><link>https://www.haipengv.com/tags/docker/</link><description>Recent content in Docker on TechOps</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 18 Mar 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://www.haipengv.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Dockerfile指令详解</title><link>https://www.haipengv.com/posts/dockerfile%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/dockerfile%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid><description>1.COPY复制文件 格式： COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;源路径&amp;gt;... &amp;lt;目标路径&amp;gt; COPY [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] [&amp;quot;&amp;lt;源路径1&amp;gt;&amp;quot;,... &amp;quot;&amp;l</description></item><item><title>Docker中特殊的镜像</title><link>https://www.haipengv.com/posts/docker%E4%B8%AD%E7%89%B9%E6%AE%8A%E7%9A%84%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E4%B8%AD%E7%89%B9%E6%AE%8A%E7%9A%84%E9%95%9C%E5%83%8F/</guid><description>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。 1 2 FROM scratch ... 如果你以</description></item><item><title>Docker创建容器rm参数使用</title><link>https://www.haipengv.com/posts/docker%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8rm%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8rm%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8/</guid><description>1.创建容器，容器停止后立即删除 1 docker run --rm --name web -p 8080:8080 ubuntu:latest 注意: `&amp;ndash;rm` 参数不可和`-d`参数同时使用 使用一下参数找不到运行过的容器 1 docker ps -a</description></item><item><title>Docker删除退出的容器</title><link>https://www.haipengv.com/posts/docker%E5%88%A0%E9%99%A4%E9%80%80%E5%87%BA%E7%9A%84%E5%AE%B9%E5%99%A8/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%88%A0%E9%99%A4%E9%80%80%E5%87%BA%E7%9A%84%E5%AE%B9%E5%99%A8/</guid><description>1.查看所有容器 1 2 3 4 5 6 7 [root@k3s-storage my_app]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 5c48e6776033 fd6c16bb0dd9 &amp;#34;/bin/sh -c &amp;#39;pip ins…&amp;#34; 3 minutes ago Exited (2) 3 minutes ago determined_taussig 295eaaec53ac c1bb875edc55 &amp;#34;/bin/sh -c &amp;#39;pip ins…&amp;#34; 22 minutes ago Exited (2) 22 minutes ago interesting_elgamal 431f19866106 055e8a2355d0 &amp;#34;/bin/sh -c &amp;#39;pip i</description></item><item><title>Docker应用开发01</title><link>https://www.haipengv.com/posts/docker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%9101/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%9101/</guid><description>1.项目概述 开发一个web应用接口，能够通过该接口实现对数据库中数据的增删改。 2.工具准备 idea docker mongodb robo 3T springboot postman 3.开发过程 3.1 docker中搭建mongo数据库 1 docker run -itd</description></item><item><title>Docker应用开发02</title><link>https://www.haipengv.com/posts/docker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%9102/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%9102/</guid><description>1.项目回顾 上一篇我们使用容器搭建了mongo数据库并创建了具有读写操作的用户，本篇我们将使用idea工具创建springboot项目和mongo数据库结合起来</description></item><item><title>Docker应用开发03</title><link>https://www.haipengv.com/posts/docker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%9103/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%9103/</guid><description>1.项目回顾 上篇文章中我们使用idea创建了springboot项目并且和mongo数据库整合。本篇将使用idea把springboot项目代码打包成jar包，</description></item><item><title>Docker数据卷创建与共享</title><link>https://www.haipengv.com/posts/docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%85%B1%E4%BA%AB/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%85%B1%E4%BA%AB/</guid><description>1.docker将宿主机和容器内部路径映射 方式1： 1 2 [root@k3s-storage volume-ubuntu]# docker run -itd --name test-ubuntu1 -v /home/volume-ubuntu:/usr/sbin ubuntu:latest bash 875c2d5e3e45d38cb31d586d4530472ba74beeb5e84c32bfc26849d880dfb11f 方式2： 1 2 [root@k3s-storage volume-ubuntu]# docker run -itd --name test-ubuntu1 -v $(pwd):/usr/sbin ubuntu:latest bash 651c856a202e52fa66f316f60568c9c0fd844bc02efbd137e3b45974cad7a1df 宿主机路径： 1 /home/volume-ubuntu 容器内路径： 1 /usr/sbin 1.1 测试 进入/h</description></item><item><title>Docker映射端口方式</title><link>https://www.haipengv.com/posts/docker%E6%98%A0%E5%B0%84%E7%AB%AF%E5%8F%A3%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E6%98%A0%E5%B0%84%E7%AB%AF%E5%8F%A3%E6%96%B9%E5%BC%8F/</guid><description>1.指定端口 创建容器时使用小写p来指定端口。 1 2 [root@k3s-storage test-build]# docker run -d --name myapp -p 8080:8080 app:v1.0 344efe4c10f47e72624e3bbe341378cb8dd21de9259d7d14f9aa40b9a3d5e8d8 2.随机端口 创建容器时使用大写P随机创建端口。 1 2 [root@k3s-storage test-build]# docker run -d --name myapp2 -P app:v1.0 dcb87cd6df301fe712d666f80560575f1dad7167005498f8aa561f083f8d3704 3.查看容器启动信息</description></item><item><title>Docker释放空标签镜像</title><link>https://www.haipengv.com/posts/docker%E9%87%8A%E6%94%BE%E7%A9%BA%E6%A0%87%E7%AD%BE%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E9%87%8A%E6%94%BE%E7%A9%BA%E6%A0%87%E7%AD%BE%E9%95%9C%E5%83%8F/</guid><description>1.查看空标签镜像 1 2 3 [root@k3s-storage my_app]# docker images -f dangling=true REPOSITORY TAG IMAGE ID CREATED SIZE &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; fd6c16bb0dd9 About a minute ago 126MB 2.过滤镜像ID 1 2 [root@k3s-storage my_app]# docker images -f dangling=true -q fd6c16bb0dd9 3.根据镜像ID删除镜像 1 2 3 4 [root@k3s-storage my_app]# docker rmi -f $(docker images -f dangling=true -q) Deleted: sha256:fd6c16bb0dd942c4f844043dcbc0440a42cfef13bb36dbb7e99d292fd64077b9 Deleted: sha256:20b3cabfb57470d3e399effe31c63a47907144a810afb6270af23574821eb911</description></item><item><title>Docker镜像以特殊格式显示</title><link>https://www.haipengv.com/posts/docker%E9%95%9C%E5%83%8F%E4%BB%A5%E7%89%B9%E6%AE%8A%E6%A0%BC%E5%BC%8F%E6%98%BE%E7%A4%BA/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E9%95%9C%E5%83%8F%E4%BB%A5%E7%89%B9%E6%AE%8A%E6%A0%BC%E5%BC%8F%E6%98%BE%E7%A4%BA/</guid><description>Go的模板语法 1.只包含镜像ID和仓库名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [root@k3s-storage ~]# docker images --format {{.ID}}:{{.Repository}} 264a0301158b:app 40bd3c2209ce:debian 35a88802559d:ubuntu 35a88802559d:siyu.com/ubuntu 316c66731791:siyu.com/bitnami/kafka a8837b6f2100:siyu.com/bitnami/zookeeper 1d34ffeaf190:siyu.com/alpine 99307ab28a49:provectuslabs/kafka-ui 462828d2b59e:python 5e428d3f074a:harisekhon/alpine-java d6b2c32a0f14:registry 65ad0d468eb1:siyu.com/busybox d2c94e258dcb:hello-world 2.以表格等距显示，并且有标题行 1 2 3 4 5 6 7 8 9 10 11</description></item><item><title>Docker镜像构建上下文</title><link>https://www.haipengv.com/posts/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87/</guid><description>docker build 命令后有一个.。.表示当前目录。这个目录并不是Dockerfile文件所在的目录。这里上下文路径。 当构建的时候，用户会指定构建镜像上下文路径，docker build</description></item><item><title>使用Dockerfile创建镜像</title><link>https://www.haipengv.com/posts/%E4%BD%BF%E7%94%A8dockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/%E4%BD%BF%E7%94%A8dockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</guid><description>1.构建示例 1.1 文件层级 1 2 3 4 5 6 7 [root@k3s-storage test-build]# tree . ├── Dockerfile └── target └── 123.txt 1 directory, 2 files 1.2 Dockerfile文件内容 1 2 3 4 5 6 7 FROM siyu.com/alpine:latest VOLUME /tmp COPY target/123.txt /tmp RUN apk add --no-cache python3 EXPOSE 8080 ENV NAME World CMD [&amp;#34;python3&amp;#34;, &amp;#34;-m&amp;#34;,</description></item><item><title>自建仓库registry使用证书认证方法</title><link>https://www.haipengv.com/posts/%E8%87%AA%E5%BB%BA%E4%BB%93%E5%BA%93registry%E4%BD%BF%E7%94%A8%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/%E8%87%AA%E5%BB%BA%E4%BB%93%E5%BA%93registry%E4%BD%BF%E7%94%A8%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95/</guid><description>1.证书创建过程 服务端创建所需目录 1 mkdir -p /home/docker-registry/certs /home/docker-registry/registry 1.1 创建配置文件（san.cnf） 创建一个文本文件，命名为 san.cnf，用于定义证书生成的配置。示例内容如下： 1 2 3</description></item><item><title>自建本地镜像仓库Registry</title><link>https://www.haipengv.com/posts/%E8%87%AA%E5%BB%BA%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93-registry/</link><pubDate>Mon, 17 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/%E8%87%AA%E5%BB%BA%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93-registry/</guid><description>一、起因 使用k3s拉取镜像时总是会遇到拉取失败，所以如果把需要的镜像都存放到本地仓库中，每次使用只需要从本地仓库中获取，这样方便许多。 二、部署过程 选用和k3s集</description></item><item><title>Centos7.3离线安装docker</title><link>https://www.haipengv.com/posts/centos7.3%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/centos7.3%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</guid><description>离线安装 1 2 3 [root@HZ ~]$ uname -a Linux HZ 3.10.0-514.el7.centos.x86_64 #1 SMP Fri Jan 13 15:16:57 CST 2017 x86_64 x86_64 x86_64 GNU/Linux CentOS Linux release 7.3.1611 (Core) 离线包下载 https://download.docker.com/linux/static/stable/x86_64/ 在这里我选在下载的版本是：docker-20.10.9.tgz 上传到服务器上 开始安装 创</description></item><item><title>Docker冷门技巧</title><link>https://www.haipengv.com/posts/docker%E5%86%B7%E9%97%A8%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%86%B7%E9%97%A8%E6%8A%80%E5%B7%A7/</guid><description>查看docker镜像的dockerfile 将&amp;lt;IMAGE ID&amp;gt;替换为待查看Dockerfile的镜像ID。 1 docker history &amp;lt;IMAGE ID&amp;gt; --format &amp;#34;{{.CreatedBy}}&amp;#34; --no-trunc |tac | awk &amp;#39;{if($3~/nop/){for(i=1;i&amp;lt;=3;i++){$i=&amp;#34;&amp;#34;};print substr($0,4)}else{print &amp;#34;RUN&amp;#34;,$0}}&amp;#39; 对比 1 2 3 4 5</description></item><item><title>Docker创建专有网卡</title><link>https://www.haipengv.com/posts/docker%E5%88%9B%E5%BB%BA%E4%B8%93%E6%9C%89%E7%BD%91%E5%8D%A1/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%88%9B%E5%BB%BA%E4%B8%93%E6%9C%89%E7%BD%91%E5%8D%A1/</guid><description>docker创建专有网卡 需求： tomcat容器需要通过jdbc模块连接数据库mysql，配置文件如果指定IP地址，mysql容器一旦损坏，IP地址就会更改，需要</description></item><item><title>Docker基础</title><link>https://www.haipengv.com/posts/docker%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%9F%BA%E7%A1%80/</guid><description>安装及命令 Docker命令 常用 1 2 3 4 5 6 7 8 9 10 11 docker version docker info docker pull docker login docker logout docker images docker ps -a docker start|stop|restart docker rm xxxx docker rmi xxxx docker exec -it `name OR id` /bin/bash 批量停止删除容器和镜像 停止所有容器 1 docker stop $(docker ps -aq) 删</description></item><item><title>Docker安装jupyter</title><link>https://www.haipengv.com/posts/docker%E5%AE%89%E8%A3%85jupyter/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E5%AE%89%E8%A3%85jupyter/</guid><description>安装jupyter 1、登录dockerhub查看需要的Jupyter - Docker Official Images。 2、下载jupyter镜像（以6.4.12为例） docker pull jupyter/base-notebook:notebook-6.4.12 3、创建配置目录 mkdir</description></item><item><title>Docker配置tab补全命令</title><link>https://www.haipengv.com/posts/docker%E9%85%8D%E7%BD%AEtab%E8%A1%A5%E5%85%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E9%85%8D%E7%BD%AEtab%E8%A1%A5%E5%85%A8%E5%91%BD%E4%BB%A4/</guid><description>docker使用tab自动补全命令 On RHEL-based systems dnf install bash-completion -y yum install bash-completion -y On Debian-based systems 1 apt-get install bash-completion -y 下载命令补全文件 1 curl https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker -o /etc/bash_completion.d/docker.sh 如果下载失败最后附上文件内容。 重新登录终端 测试命令补全 1 2 3 docker</description></item><item><title>Docker镜像加速</title><link>https://www.haipengv.com/posts/docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</guid><description>docker镜像加速 创建/etc/docker/daemon.json文件 1 2 3 4 5 6 7 8 9 10 11 12 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://dockerproxy.com&amp;#34;, &amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34;, &amp;#34;https://docker.nju.edu.cn&amp;#34; ] } EOF sudo systemctl daemon-reload sudo systemctl restart docker docker hub 国内镜像加</description></item><item><title>GHCR镜像加速方式</title><link>https://www.haipengv.com/posts/ghcr%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/ghcr%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E6%96%B9%E5%BC%8F/</guid><description>直接拉取镜像速度很慢，网上看到一个加速方法很好用，特此记录一下。 1 2 docker pull ghcr.io/home-assistant/home-assistant:stable # 这里的ghcr.io是github的docker镜像地址 加速方法：将ghcr.io替</description></item><item><title>Harbor使用自签名证书实现https登录</title><link>https://www.haipengv.com/posts/harbor%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0https%E7%99%BB%E5%BD%95/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/harbor%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0https%E7%99%BB%E5%BD%95/</guid><description>前言 上次安装了Harbor，并没有开启https，不太安全，这次记录下自签名证书来实现https登录。 自签名证书创建过程 创建证书目录 1 2 3 4 mkdir /root/ca -p cd /root/ca #以下命令</description></item><item><title>Harbor安装与简单使用</title><link>https://www.haipengv.com/posts/harbor%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/harbor%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid><description>前言 Harbor 是一个开源的容器镜像仓库，它提供用户权限管理、镜像复制等功能，提高使用的registry的效率。确保镜像被扫描并且没有漏洞，并将镜像标记为可信。 harbo</description></item><item><title>Ubuntu20.04安装docker</title><link>https://www.haipengv.com/posts/ubuntu20.04%E5%AE%89%E8%A3%85docker/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/ubuntu20.04%E5%AE%89%E8%A3%85docker/</guid><description>ubuntu20.04安装docker 操作系统要求 Docker只支持64位版本的 Ubuntu 18.04 LTS、20.04 LTS、21.04、21.10 操作系统，更旧的 Ubuntu 操作系统如</description></item><item><title>不同架构平台下Docker官方镜像包查找说明</title><link>https://www.haipengv.com/posts/%E4%B8%8D%E5%90%8C%E6%9E%B6%E6%9E%84%E5%B9%B3%E5%8F%B0%E4%B8%8Bdocker%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%E5%8C%85%E6%9F%A5%E6%89%BE%E8%AF%B4%E6%98%8E/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/%E4%B8%8D%E5%90%8C%E6%9E%B6%E6%9E%84%E5%B9%B3%E5%8F%B0%E4%B8%8Bdocker%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%E5%8C%85%E6%9F%A5%E6%89%BE%E8%AF%B4%E6%98%8E/</guid><description>问题出现的原因 我的服务器的平台架构是IBM-Z无法拉取默认的x86平台的镜像，所以需要到docker-hub上找到IBM-Z对应的镜像才能使用。 首先进入Dock</description></item><item><title>使用docker搭建openvpn</title><link>https://www.haipengv.com/posts/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAopenvpn/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0800</pubDate><guid>https://www.haipengv.com/posts/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAopenvpn/</guid><description>需求 通过vpn直接访问内网容器ip可以直接登录，不再需要先登入公网IP再跳转到内网容器内部。 访问示意图 互联网（openvpn client）--&amp;gt;（公网ip</description></item></channel></rss>